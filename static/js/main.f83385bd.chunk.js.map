{"version":3,"sources":["logo.svg","components/Rando.js","components/DiceRoll.js","components/Game.js","components/DiceGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Rando","props","state","num","makeTimer","setInterval","setState","Math","floor","random","maxNum","this","Component","DiceRoll","diceNr","number","console","log","className","isRolling","DiceGame","dice1","dice2","isrolling","onClick","e","setTimeout","disabled","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f83385bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nclass Rando extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      num: 1\r\n    };\r\n    this.makeTimer();\r\n  }\r\n  makeTimer() {\r\n    setInterval(() => {\r\n      this.setState({ num: Math.floor(Math.random() * this.props.maxNum) });\r\n    }, 1000);\r\n  }\r\n  render() {\r\n    let str = \"\\uf526\";\r\n    return (\r\n      <div>\r\n        <div></div>\r\n        <h1>\r\n          {this.state.num}\r\n          {str}{\" \"}\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rando;\r\n","import React, { Component } from \"react\";\r\nimport \"./DiceRoll.css\";\r\n\r\nclass DiceRoll extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const number = this.props.number;\r\n    console.log(number);\r\n    let diceNr;\r\n    switch (number) {\r\n      case 1:\r\n        diceNr = \"one\";\r\n        break;\r\n      case 2:\r\n        diceNr = \"two\";\r\n        break;\r\n      case 3:\r\n        diceNr = \"three\";\r\n        break;\r\n      case 4:\r\n        diceNr = \"four\";\r\n        break;\r\n      case 5:\r\n        diceNr = \"five\";\r\n        break;\r\n      case 6:\r\n        diceNr = \"six\";\r\n        break;\r\n      default:\r\n        diceNr = \"one\";\r\n    }\r\n    return (\r\n      <div className=\"roll\">\r\n        <div>\r\n          <i\r\n            className={`fas fa-dice-${diceNr}\r\n            ${this.props.isRolling && \"animacija\"}`}\r\n          ></i>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DiceRoll;\r\n","import React, { Component } from \"react\";\r\nimport Rando from \"./Rando\";\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    name: \"karolis\",\r\n    score: 0,\r\n    clicked: false\r\n  };\r\n\r\n  render() {\r\n    const keiciamScore = e => {\r\n      // e.preventDefault();\r\n      this.setState({ score: this.state.score + 10, clicked: true });\r\n    };\r\n    const dice = \"\\u2680\";\r\n    return (\r\n      <div>\r\n        <h1>\r\n          {dice} <i class=\"fas fa-dice-one\"></i>\r\n        </h1>\r\n        {this.state.score <= 50 && (\r\n          <button onClick={keiciamScore}>\r\n            {this.state.clicked ? \"Clicked\" : \"Click Me!\"}\r\n          </button>\r\n        )}\r\n        <h1>\r\n          {this.state.score > 50\r\n            ? \"Winner\"\r\n            : `Game \r\n        ${this.state.score}. Cogratulatios ${this.state.name}`}\r\n        </h1>\r\n        <Rando maxNum={this.state.score} />\r\n        <i style={{ fontSize: \"50px\" }} class=\"fa fas-dice-five\"></i>\r\n        <i style={{ fontSize: \"50px\" }} class=\"fa fa-car\"></i>\r\n        <i class=\"fa-dice-one\"></i>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport DiceRoll from \"./DiceRoll\";\r\nimport \"./DiceGame.css\";\r\n\r\nclass DiceGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dice1: 1,\r\n      dice2: 1,\r\n      isrolling: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const clickHandler = e => {\r\n      this.setState({\r\n        dice1: Math.floor(Math.random() * 6 + 1),\r\n        dice2: Math.floor(Math.random() * 6 + 1),\r\n        isrolling: true\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({ isrolling: false });\r\n      }, 1000);\r\n    };\r\n\r\n    // let number = Math.floor(Math.random() * 6 + 1);\r\n\r\n    return (\r\n      <div className=\"DiceGame\">\r\n        <h1>Dice Game</h1>\r\n        <div className=\"Dices\">\r\n          <DiceRoll\r\n            isRolling={this.state.isrolling}\r\n            number={this.state.dice1}\r\n          />\r\n          <DiceRoll\r\n            isRolling={this.state.isrolling}\r\n            number={this.state.dice2}\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          isRolling={this.state.isrolling}\r\n          onClick={clickHandler}\r\n          disabled={this.state.isrolling}\r\n        >\r\n          {this.state.isrolling ? \"Is Rolling...\" : \"Please Roll\"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DiceGame;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\nimport DiceGame from \"./components/DiceGame\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DiceGame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}